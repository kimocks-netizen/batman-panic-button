// src/components/ReportGenerator.tsx
import { useRef } from 'react';
import html2pdf from 'html2pdf.js';
import type { Panic } from '../api/panic';

interface ReportGeneratorProps {
  panics: Panic[];
}

export default function ReportGenerator({ panics }: ReportGeneratorProps) {
  const reportRef = useRef<HTMLDivElement>(null);

  const handleDownloadPdf = () => {
    if (reportRef.current) {
      const opt = {
        margin: 0.5,
        filename: 'batman-panic-report.pdf',
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' }
      };

      html2pdf().from(reportRef.current).set(opt).save();
    }
  };

  // Calculate statistics
  const totalPanics = panics.length;
  const inProgressCount = panics.filter(p => p.status.name === 'In progress').length;
  const cancelledCount = panics.filter(p => p.status.name === 'Cancelled').length;

  // Format date
  const reportDate = new Date().toLocaleDateString();
  const reportTime = new Date().toLocaleTimeString();

  return (
    <div className="bg-white p-4 rounded-lg shadow">
      <button
        onClick={handleDownloadPdf}
          className="w-full py-3 px-4 rounded-lg text-white font-bold shadow-md transition-all
            bg-gradient-to-r from-red-600 to-red-800 hover:from-red-700 hover:to-red-900 transform hover:scale-[1.01]"
        >
        Download PDF Report
      </button>

      {/* Printable content - can be visible or hidden as needed */}
      <div ref={reportRef} className="p-6 bg-white rounded-lg">
        <h1 className="text-2xl font-bold mb-2">Batman Panic System Report</h1>
        <p className="text-gray-600 mb-4">
          Generated on {reportDate} at {reportTime}
        </p>

        {/* Summary Statistics */}
        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-3">Summary</h2>
          <div className="grid grid-cols-3 gap-4 mb-4">
            <div className="border p-2 rounded">
              <p className="font-medium">Total Panics</p>
              <p className="text-xl font-bold">{totalPanics}</p>
            </div>
            <div className="border p-2 rounded">
              <p className="font-medium">In Progress</p>
              <p className="text-xl font-bold">{inProgressCount}</p>
            </div>
            <div className="border p-2 rounded">
              <p className="font-medium">Cancelled</p>
              <p className="text-xl font-bold">{cancelledCount}</p>
            </div>
          </div>
        </div>

        {/* Panic Details Table */}
        <h2 className="text-xl font-semibold mb-3">Recent Panics</h2>
        <table className="w-full border-collapse mb-6">
          <thead>
            <tr className="bg-gray-100">
              <th className="border p-2 text-left">Type</th>
              <th className="border p-2 text-left">Date/Time</th>
              <th className="border p-2 text-left">Status</th>
              <th className="border p-2 text-left">Location</th>
            </tr>
          </thead>
          <tbody>
            {panics.slice(0, 10).map((panic) => (
              <tr key={panic.id} className="border-b">
                <td className="border p-2">{panic.panic_type || 'Emergency'}</td>
                <td className="border p-2">
                  {new Date(panic.created_at).toLocaleString()}
                </td>
                <td className="border p-2">{panic.status.name}</td>
                <td className="border p-2">
                  {panic.latitude}, {panic.longitude}
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* Footer */}
        <div className="text-sm text-gray-500 mt-6">
          <p>This report was automatically generated by the Batman Panic System.</p>
          <p>Confidential - For authorized personnel only.</p>
        </div>
      </div>
    </div>
  );
}